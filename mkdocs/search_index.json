{
    "docs": [
        {
            "location": "/",
            "text": "Welcome\n\n\nWelcome to the documentation for \nMonoGame.Extended\n, a collection of NuGet packages that make \nMonoGame\n more awesome.\n\n\nWe're only just getting started building this documentation. If you're not finding what you're looking for we've got a number of other places to get help.\n\n\n\n\nWe've got a live chatroom on \ngitter\n\n\nWe've got our own section on the \nMonoGame Community Forums\n\n\nDevelopment is usually discussed in \ngithub issues\n\n\nWe've even got a \ntag on stackoverflow\n ;)\n\n\n\n\nInitially the plan is to port over the relevant pages from the wiki. Over time, this should become the place to be for those with the need to read.\n\n\nGetting Started\n\n\n\n\nInstallation",
            "title": "Home"
        },
        {
            "location": "/#welcome",
            "text": "Welcome to the documentation for  MonoGame.Extended , a collection of NuGet packages that make  MonoGame  more awesome.  We're only just getting started building this documentation. If you're not finding what you're looking for we've got a number of other places to get help.   We've got a live chatroom on  gitter  We've got our own section on the  MonoGame Community Forums  Development is usually discussed in  github issues  We've even got a  tag on stackoverflow  ;)   Initially the plan is to port over the relevant pages from the wiki. Over time, this should become the place to be for those with the need to read.",
            "title": "Welcome"
        },
        {
            "location": "/#getting-started",
            "text": "Installation",
            "title": "Getting Started"
        },
        {
            "location": "/installation/",
            "text": "Installation\n\n\nMonoGame.Extended is a collection of \nportable class libraries\n (PCL) designed to be referenced from any MonoGame project to add common extensions and classes for making your games more awesome.\n\n\nThe libraries are distributed as \nNuGet packages\n and can be installed using the NuGet Package Manager in \nVisual Studio\n, \nXamarin Studio\n, or \nMonoDevelop\n. They can also be installed by running the following command (or the equivilant command for the package you want to install) in the \nPackage Manager Console\n.\n\n\nInstall-Package MonoGame.Extended\n\n\n\nNote that \nMonoGame 3.6 will need to be installed\n to properly use MonoGame.Extended in your game project.\n\n\nReferencing the Content Pipeline extension\n\n\nTo get the full experience you'll also want to install the Content Pipeline extension:\n\n\nInstall-Package MonoGame.Extended.Content.Pipeline\n\n\n\nThis package won't add any references to your project. Instead it will download a DLL that's intended to be referenced from the \nMonoGame Content Pipeline tool\n.\n\n\nYou'll need to manually add the reference to your content file (usually \nContent.mgcb\n) using one of the following methods.\n\n\nUsing the MonoGame Pipeline GUI\n\n\nTo add the reference using the Pipeline GUI tool follow these steps:\n\n\n\n\nClick on the \nContent\n node in the root of the tree.\n\n\nIn the properties window, modify the \nReferences\n property.\n\n\nFind and add the \nMonoGame.Extended.Content.Pipeline.dll\n. It's usually located in the \npackages\n folder of your solution.\n\n\n\n\n\n\nUsing a text editor\n\n\nAn alternative way to add the reference is by manually editing the \nContent.mgcb\n file in a text editor or Visual Studio. Look for the references section and update it like this:\n\n\n#-------------------------------- References --------------------------------#\n\n/reference:..\\..\\packages\\MonoGame.Extended.Content.Pipeline.0.6.372\\tools\\MonoGame.Extended.Content.Pipeline.dll\n\n\n\n\nRemember:\n The \nMonoGame.Extended.dll\n and the \nMonoGame.Extended.Content.Pipeline.dll\n come as a pair. Always make sure the version referenced by your game matches the version referenced by the Pipeline tool.\n\n\nThat's it! Once you've referenced the library you can start using it to make your games even more awesome.",
            "title": "Installation"
        },
        {
            "location": "/installation/#installation",
            "text": "MonoGame.Extended is a collection of  portable class libraries  (PCL) designed to be referenced from any MonoGame project to add common extensions and classes for making your games more awesome.  The libraries are distributed as  NuGet packages  and can be installed using the NuGet Package Manager in  Visual Studio ,  Xamarin Studio , or  MonoDevelop . They can also be installed by running the following command (or the equivilant command for the package you want to install) in the  Package Manager Console .  Install-Package MonoGame.Extended  Note that  MonoGame 3.6 will need to be installed  to properly use MonoGame.Extended in your game project.",
            "title": "Installation"
        },
        {
            "location": "/installation/#referencing-the-content-pipeline-extension",
            "text": "To get the full experience you'll also want to install the Content Pipeline extension:  Install-Package MonoGame.Extended.Content.Pipeline  This package won't add any references to your project. Instead it will download a DLL that's intended to be referenced from the  MonoGame Content Pipeline tool .  You'll need to manually add the reference to your content file (usually  Content.mgcb ) using one of the following methods.",
            "title": "Referencing the Content Pipeline extension"
        },
        {
            "location": "/installation/#using-the-monogame-pipeline-gui",
            "text": "To add the reference using the Pipeline GUI tool follow these steps:   Click on the  Content  node in the root of the tree.  In the properties window, modify the  References  property.  Find and add the  MonoGame.Extended.Content.Pipeline.dll . It's usually located in the  packages  folder of your solution.",
            "title": "Using the MonoGame Pipeline GUI"
        },
        {
            "location": "/installation/#using-a-text-editor",
            "text": "An alternative way to add the reference is by manually editing the  Content.mgcb  file in a text editor or Visual Studio. Look for the references section and update it like this:  #-------------------------------- References --------------------------------#\n\n/reference:..\\..\\packages\\MonoGame.Extended.Content.Pipeline.0.6.372\\tools\\MonoGame.Extended.Content.Pipeline.dll  Remember:  The  MonoGame.Extended.dll  and the  MonoGame.Extended.Content.Pipeline.dll  come as a pair. Always make sure the version referenced by your game matches the version referenced by the Pipeline tool.  That's it! Once you've referenced the library you can start using it to make your games even more awesome.",
            "title": "Using a text editor"
        }
    ]
}